// Generated by CoffeeScript 1.3.3
(function() {
  var $, AmbilightTable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  $.extend($.fn, {
    ambilight: function(options) {
      return this.each(function() {
        if ($(this).data("_ambilightTable") == null) {
          return $(this).data('_ambilightTable', new AmbilightTable(this, options));
        }
      });
    }
  });

  AmbilightTable = (function() {
    var currentID;

    currentID = 0;

    function AmbilightTable(element, options) {
      this.preloadImages = __bind(this.preloadImages, this);

      this.onKeydown = __bind(this.onKeydown, this);

      this.deactivateCurrentImage = __bind(this.deactivateCurrentImage, this);

      this.delegateEvents = __bind(this.delegateEvents, this);
      this.el = $(element);
      this.images = this.el.find("img");
      this.prepareImages();
      this.preloadImages();
    }

    AmbilightTable.prototype.activateImage = function(image) {
      this.deactivateCurrentImage();
      image = $(image);
      this.currentImage = image;
      return image.data("_ambilightContainer").addClass("ambilight-active");
    };

    AmbilightTable.prototype.blurImage = function(image) {
      var canvas, canvasImage, id;
      image = $(image);
      if (image.data("_ambilightCanvas") != null) {
        return true;
      }
      id = image.data("id");
      canvas = $("<canvas id='ambilight-canvas-" + id + "' class='ambilight-canvas'></canvas>");
      image.data("_ambilightCanvas", canvas);
      image.data("_ambilightContainer").prepend(canvas);
      canvasImage = new CanvasImage(canvas[0], image[0]);
      return canvasImage.blur(8);
    };

    AmbilightTable.prototype.delegateEvents = function() {
      return $(document).on("keydown", this.onKeydown);
    };

    AmbilightTable.prototype.deactivateCurrentImage = function() {
      if (this.currentImage == null) {
        return true;
      }
      return this.currentImage.data("_ambilightContainer").removeClass("ambilight-active");
    };

    AmbilightTable.prototype.nextImage = function() {
      var newIndex;
      newIndex = this.images.index(this.currentImage) + 1;
      if (newIndex > this.images.length - 1) {
        newIndex = 0;
      }
      return this.setImage(newIndex);
    };

    AmbilightTable.prototype.onKeydown = function(e) {
      switch (e.keyCode) {
        case 40:
          return this.previousImage();
        case 37:
          return this.previousImage();
        case 38:
          return this.nextImage();
        case 39:
          return this.nextImage();
      }
    };

    AmbilightTable.prototype.preloadImages = function() {
      var imagesLoaded,
        _this = this;
      imagesLoaded = [];
      return this.images.on("load", function(e) {
        var image;
        image = $(e.currentTarget);
        if (_this.images.index(image) === 0) {
          _this.setImage(0);
        }
        imagesLoaded.push(image);
        if (_this.images.length === imagesLoaded.length) {
          _this.delegateEvents();
          return _this.el.trigger("allAmbilightImagesLoaded");
        }
      });
    };

    AmbilightTable.prototype.prepareImages = function() {
      var image, _i, _len, _ref, _results;
      _ref = this.images;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        image = $(image);
        image.addClass("ambilight-image");
        image.data("id", ++currentID);
        image.attr("id", "ambilight-image-" + (image.data("id")));
        image.wrap($("<div class='ambilight-image-container'></div>"));
        image.data("_ambilightContainer", image.closest(".ambilight-image-container"));
        image.wrap($("<div class='ambilight-image-table'></div>"));
        _results.push(image.wrap($("<div class='ambilight-image-cell'></div>")));
      }
      return _results;
    };

    AmbilightTable.prototype.previousImage = function() {
      var newIndex;
      newIndex = this.images.index(this.currentImage) - 1;
      if (newIndex < 0) {
        newIndex = this.images.length - 1;
      }
      return this.setImage(newIndex);
    };

    AmbilightTable.prototype.setImage = function(index) {
      this.activateImage(this.images[index]);
      return this.blurImage(this.images[index]);
    };

    return AmbilightTable;

  })();

  jQuery(function() {
    return $(".ambilight-table").ambilight();
  });

}).call(this);
/**
 * Light layer on top of a canvas element to represent an image displayed
 * within.  Pass in a canvas element and an Image object and you'll see the
 * image within the canvas element.  Use the provided methods (e.g. blur) to
 * manipulate it.
 *
 * @constructor
 * @param {HTMLElement} element HTML canvas element.
 * @param {Image} image Image object.
 */
var CanvasImage = function(element, image) {
  this.image = image;
  this.element = element;
  this.element.width = this.image.width;
  this.element.height = this.image.height;
  this.context = this.element.getContext("2d");
  this.context.drawImage(this.image, 0, 0);
};
CanvasImage.prototype = {
  /**
   * Runs a blur filter over the image.
   *
   * @param {int} strength Strength of the blur.
   */
  blur: function (strength) {
    this.context.globalAlpha = 0.5; // Higher alpha made it more smooth
    // Add blur layers by strength to x and y
    // 2 made it a bit faster without noticeable quality loss
    for (var y = -strength; y <= strength; y += 2) {
      for (var x = -strength; x <= strength; x += 2) {
        // Apply layers
        this.context.drawImage(this.element, x, y);
        // Add an extra layer, prevents it from rendering lines
        // on top of the images (does makes it slower though)
        if (x>=0 && y>=0) {
          this.context.drawImage(this.element, -(x-1), -(y-1));
        }
      }
    }
    this.context.globalAlpha = 1.0;
  }
};

/**
 * Initialise an image on the page and blur it.
 */
window.onload = function() {
  var url = '../sunset.jpg',
    image,
    canvasImage;

  image = new Image();
  image.onload = function () {
    canvasImage = new CanvasImage(document.getElementById('blur_1'), this);
    try{console.time('blur_1');}catch(err){}
    canvasImage.blur(1);
    try{console.timeEnd('blur_1');}catch(err){}

    canvasImage = new CanvasImage(document.getElementById('blur_2'), this);
    try{console.time('blur_2');}catch(err){}
    canvasImage.blur(2);
    try{console.timeEnd('blur_2');}catch(err){}

    canvasImage = new CanvasImage(document.getElementById('blur_3'), this);
    try{console.time('blur_3');}catch(err){}
    canvasImage.blur(3);
    try{console.timeEnd('blur_3');}catch(err){}

    canvasImage = new CanvasImage(document.getElementById('blur_4'), this);
    try{console.time('blur_4');}catch(err){}
    canvasImage.blur(4);
    try{console.timeEnd('blur_4');}catch(err){}
  };
  image.src = url;
};